// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new apps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAppsAppID deletes an app

Delete an app.
*/
func (a *Client) DeleteAppsAppID(params *DeleteAppsAppIDParams) (*DeleteAppsAppIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsAppIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppsAppID",
		Method:             "DELETE",
		PathPattern:        "/apps/{appID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAppsAppIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppsAppIDOK), nil

}

/*
GetApps gets applications

Get a filtered applications returned in alphabetical order.
*/
func (a *Client) GetApps(params *GetAppsParams) (*GetAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApps",
		Method:             "GET",
		PathPattern:        "/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppsOK), nil

}

/*
GetAppsAppID gets information for a app

This gives more details about a app, such as statistics.
*/
func (a *Client) GetAppsAppID(params *GetAppsAppIDParams) (*GetAppsAppIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppID",
		Method:             "GET",
		PathPattern:        "/apps/{appID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppsAppIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppsAppIDOK), nil

}

/*
PostApps posts new app

Insert a new app
*/
func (a *Client) PostApps(params *PostAppsParams) (*PostAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostApps",
		Method:             "POST",
		PathPattern:        "/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsOK), nil

}

/*
PutAppsAppID updates an app

Updates and application.
*/
func (a *Client) PutAppsAppID(params *PutAppsAppIDParams) (*PutAppsAppIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppsAppIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppsAppID",
		Method:             "PUT",
		PathPattern:        "/apps/{appID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAppsAppIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppsAppIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
