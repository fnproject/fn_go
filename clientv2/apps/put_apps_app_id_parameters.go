// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	modelsv2 "github.com/fnproject/fn_go/modelsv2"
)

// NewPutAppsAppIDParams creates a new PutAppsAppIDParams object
// with the default values initialized.
func NewPutAppsAppIDParams() *PutAppsAppIDParams {
	var ()
	return &PutAppsAppIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutAppsAppIDParamsWithTimeout creates a new PutAppsAppIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutAppsAppIDParamsWithTimeout(timeout time.Duration) *PutAppsAppIDParams {
	var ()
	return &PutAppsAppIDParams{

		timeout: timeout,
	}
}

// NewPutAppsAppIDParamsWithContext creates a new PutAppsAppIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutAppsAppIDParamsWithContext(ctx context.Context) *PutAppsAppIDParams {
	var ()
	return &PutAppsAppIDParams{

		Context: ctx,
	}
}

// NewPutAppsAppIDParamsWithHTTPClient creates a new PutAppsAppIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutAppsAppIDParamsWithHTTPClient(client *http.Client) *PutAppsAppIDParams {
	var ()
	return &PutAppsAppIDParams{
		HTTPClient: client,
	}
}

/*PutAppsAppIDParams contains all the parameters to send to the API endpoint
for the put apps app ID operation typically these are written to a http.Request
*/
type PutAppsAppIDParams struct {

	/*AppID
	  Opaque Unique application ID

	*/
	AppID string
	/*Body
	  App to modify.

	*/
	Body *modelsv2.App

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put apps app ID params
func (o *PutAppsAppIDParams) WithTimeout(timeout time.Duration) *PutAppsAppIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put apps app ID params
func (o *PutAppsAppIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put apps app ID params
func (o *PutAppsAppIDParams) WithContext(ctx context.Context) *PutAppsAppIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put apps app ID params
func (o *PutAppsAppIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put apps app ID params
func (o *PutAppsAppIDParams) WithHTTPClient(client *http.Client) *PutAppsAppIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put apps app ID params
func (o *PutAppsAppIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppID adds the appID to the put apps app ID params
func (o *PutAppsAppIDParams) WithAppID(appID string) *PutAppsAppIDParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the put apps app ID params
func (o *PutAppsAppIDParams) SetAppID(appID string) {
	o.AppID = appID
}

// WithBody adds the body to the put apps app ID params
func (o *PutAppsAppIDParams) WithBody(body *modelsv2.App) *PutAppsAppIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put apps app ID params
func (o *PutAppsAppIDParams) SetBody(body *modelsv2.App) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PutAppsAppIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appID
	if err := r.SetPathParam("appID", o.AppID); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
